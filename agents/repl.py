# agents/repl.py

import sys
import time
import select
from datetime import datetime

from storage import Storage
from tools.notebook_store import Notebook
from tools import llm
from tools.similarity import is_similar  # ‚úÖ –∑–∞–º–µ–Ω—è–µ—Ç –∑–∞–≥–ª—É—à–∫—É

def print_thought(thought, prefix="üí°"):
    print(f"{prefix} {thought}")

def wait_for_input(timeout=10):
    print(f"‚åõ –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({timeout} —Å–µ–∫)... (–≤–≤–µ–¥–∏—Ç–µ `exit` –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    rlist, _, _ = select.select([sys.stdin], [], [], timeout)
    if rlist:
        return sys.stdin.readline().strip()
    else:
        print("‚è±Ô∏è –ù–µ—Ç –≤–≤–æ–¥–∞. –ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è...")
        return None

def run_repl(config=None):
    print("[üß† HMP-Agent] –ó–∞–ø—É—Å–∫ REPL-—Ä–µ–∂–∏–º–∞.")
    config = config or {}
    agent_name = config.get("agent_name", "Unnamed-Agent")
    repl_timeout = config.get("repl_timeout", 10)
    similarity_threshold = config.get("similarity_threshold", 0.9)

    db = Storage(config=config)
    notebook = Notebook()
    thoughts = [f"–ü—Ä–∏–≤–µ—Ç, —è {agent_name}."]
    last_check_time = datetime.utcnow().isoformat()

    while True:
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –º—ã—Å–ª—å
        last = thoughts[-1]
        next_thought = llm.generate_thought(last, config=config)

        if not is_similar(last, next_thought, threshold=similarity_threshold):
            print_thought(next_thought)
            db.write_entry(next_thought, tags=["thought"])
            thoughts.append(next_thought)
        else:
            print("ü§î –ú—ã—Å–ª—å —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∞. –ü—Ä–æ–≤–µ—Ä—è—é –±–ª–æ–∫–Ω–æ—Ç...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–º–µ—Ç–æ–∫
        new_notes = notebook.get_notes_after(last_check_time)
        if new_notes:
            print(f"üìì –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±–ª–æ–∫–Ω–æ—Ç–µ: {len(new_notes)}")
            for nid, text, source, ts in new_notes:
                print_thought(text, prefix="üìù")
                db.write_entry(text, tags=["notepad"])
                thoughts.append(text)
                last_check_time = ts  # –æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        user_input = wait_for_input(timeout=repl_timeout)
        if user_input:
            if user_input.strip().lower() in ("exit", "quit"):
                print("üëã –í—ã—Ö–æ–¥ –∏–∑ REPL. –î–æ —Å–≤—è–∑–∏!")
                break
            else:
                db.write_entry(user_input, tags=["user"])
                thoughts.append(user_input)

    db.close()
    notebook.close()

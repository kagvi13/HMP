# repl.py

import readline
from storage import Storage
import time

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º—ã—Å–ª–µ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ LLM)
def compare_thoughts(a, b):
    import difflib
    ratio = difflib.SequenceMatcher(None, a, b).ratio()
    if ratio > 0.95:
        return "identical"
    elif ratio > 0.8:
        return "very similar"
    elif ratio > 0.6:
        return "somewhat similar"
    elif ratio > 0.4:
        return "different"
    else:
        return "unrelated"

# –û—Å–Ω–æ–≤–Ω–æ–π REPL-—Ü–∏–∫–ª

def run_repl():
    storage = Storage()
    print("üß† HMP-Agent [REPL —Ä–µ–∂–∏–º]")
    print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É ('help' ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)")

    last_thought = None

    while True:
        try:
            cmd = input("ü§ñ > ").strip()

            if cmd in ("exit", "quit"):
                print("üëã –í—ã—Ö–æ–¥ –∏–∑ REPL.")
                break

            elif cmd == "help":
                print("""
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  think            ‚Äî –∞–≥–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º—ã—Å–ª—å
  write <—Ç–µ–∫—Å—Ç>    ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –º—ã—Å–ª—å –≤ –¥–Ω–µ–≤–Ω–∏–∫
  read             ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
  concepts         ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
  links            ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤—è–∑–∏
  exit / quit      ‚Äî –≤—ã–π—Ç–∏
""")

            elif cmd == "think":
                thought = input("üß† –ù–æ–≤–∞—è –º—ã—Å–ª—å: ").strip()
                print(f"üí° –ú—ã—Å–ª—å: {thought}")

                if last_thought:
                    similarity = compare_thoughts(last_thought, thought)
                    print(f"üß† –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º—ã—Å–ª—å—é: {similarity}")

                    if similarity in ("identical", "very similar"):
                        print("üîÅ –ú—ã—Å–ª–∏ –ø–æ—á—Ç–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ.")
                        continue

                last_thought = thought
                storage.write_entry(thought)
                print("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫.")

            elif cmd.startswith("write "):
                text = cmd[len("write "):].strip()
                storage.write_entry(text)
                print("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

            elif cmd == "read":
                entries = storage.read_entries()
                for e in entries:
                    print(f"[{e[0]}] {e[1]} | tags: {e[2]} | ts: {e[3]}")

            elif cmd == "concepts":
                for c in storage.get_concepts():
                    print(f"[{c[0]}] {c[1]} ‚Äî {c[2]}")

            elif cmd == "links":
                for l in storage.get_links():
                    print(f"{l[1]} --[{l[3]}]--> {l[2]}")

            else:
                print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help'.")

        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            break

    storage.close()

if __name__ == "__main__":
    run_repl()

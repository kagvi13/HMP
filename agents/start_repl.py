import sys
import os
import threading

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from init import ensure_db_initialized
from tools.storage import Storage

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–≤–µ—Ä–Ω—ë—Ç config, –µ—Å–ª–∏ –≤—Å—ë –û–ö)
config = ensure_db_initialized()

storage = Storage()

# ‚öôÔ∏è –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
ENABLE_REPL      = False  # üß† repl.py
ENABLE_UI        = True  # üìì web_ui.py (FastAPI)
ENABLE_MESH      = False  # üåê agent_mesh_listener.py
ENABLE_SYNC      = True  # üîÑ peer_sync.py
ENABLE_TRANSPORT = False  # üì° transporter.py
ENABLE_CONTROL   = False  # üß≠ agent_controller.py
ENABLE_CONTAINER = False  # üß± container_agent.py
ENABLE_ETHICS    = False  # üß† ethics_guard.py

def start_all():
    threads = []

    if ENABLE_REPL:
        if not storage.is_process_alive("REPL", max_delay=180):
            def repl():
                from repl import start_repl
                start_repl()
            threads.append(threading.Thread(target=repl, name="REPL"))
        else:
           print("REPL —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º heartbeat.")

    if ENABLE_UI:
        if not storage.is_process_alive("NotebookUI", max_delay=180):
            def ui():
                from web_ui import start_notebook
                start_notebook()
            threads.append(threading.Thread(target=ui, name="NotebookUI"))
        else:
           print("NotebookUI —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º heartbeat.")

    if ENABLE_MESH:
        if not storage.is_process_alive("MeshListener", max_delay=180):
            def mesh():
                from agent_mesh_listener import start_listener
                start_listener()
            threads.append(threading.Thread(target=mesh, name="MeshListener"))
        else:
           print("MeshListener —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º heartbeat.")

    if ENABLE_SYNC:
        if not storage.is_process_alive("PeerSync", max_delay=180):
            def sync():
                from peer_sync import start_sync
                start_sync()
            threads.append(threading.Thread(target=sync, name="PeerSync"))
        else:
           print("PeerSync —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º heartbeat.")

    if ENABLE_TRANSPORT:
        if not storage.is_process_alive("Transporter", max_delay=180):
            def transport():
                from transporter import start_transporter
                start_transporter()
            threads.append(threading.Thread(target=transport, name="Transporter"))
        else:
           print("Transporter —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º heartbeat.")

    if ENABLE_CONTROL:
        if not storage.is_process_alive("Controller", max_delay=180):
            def control():
                from agent_controller import start_controller
                start_controller()
            threads.append(threading.Thread(target=control, name="Controller"))
        else:
           print("Controller —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º heartbeat.")

    if ENABLE_CONTAINER:
        if not storage.is_process_alive("ContainerAgent", max_delay=180):
            def container():
                from container_agent import start_container
                start_container()
            threads.append(threading.Thread(target=container, name="ContainerAgent"))
        else:
           print("ContainerAgent —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º heartbeat.")

    if ENABLE_ETHICS:
        if not storage.is_process_alive("EthicsGuard", max_delay=180):
            def ethics():
                from ethics_guard import start_ethics_guard
                start_ethics_guard()
            threads.append(threading.Thread(target=ethics, name="EthicsGuard"))
        else:
           print("EthicsGuard —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –¥–∞–Ω–Ω—ã–º heartbeat.")

    # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
    for thread in threads:
        try:
            thread.start()
            print(f"[‚úî] –ü–æ—Ç–æ–∫ {thread.name} –∑–∞–ø—É—â–µ–Ω.")
        except Exception as e:
            print(f"[‚ö†Ô∏è] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ {thread.name}: {e}")

    for thread in threads:
        thread.join()

if __name__ == "__main__":
    print("[*] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤...")
    start_all()

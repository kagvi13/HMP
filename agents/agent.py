# agents/agent.py

import argparse
from storage import Storage
import time
import threading

def main():
    parser = argparse.ArgumentParser(description="HMP Agent CLI")
    subparsers = parser.add_subparsers(dest="command")

    # Diary commands
    write_parser = subparsers.add_parser("write_entry", help="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫")
    write_parser.add_argument("text")
    write_parser.add_argument("--tags", nargs="*", help="–¢–µ–≥–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

    read_parser = subparsers.add_parser("read_entries", help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
    read_parser.add_argument("--limit", type=int, default=5)

    search_time_parser = subparsers.add_parser("search_entries_by_time", help="–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É")
    search_time_parser.add_argument("--from_ts", required=True)
    search_time_parser.add_argument("--to_ts", required=True)

    # Graph commands
    concept_parser = subparsers.add_parser("add_concept", help="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ç")
    concept_parser.add_argument("name")
    concept_parser.add_argument("--description", help="–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

    link_parser = subparsers.add_parser("add_link", help="–î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å")
    link_parser.add_argument("--from_node", type=int, required=True)
    link_parser.add_argument("--to_node", type=int, required=True)
    link_parser.add_argument("--relation", required=True)

    expand_parser = subparsers.add_parser("expand_graph", help="–†–∞—Å—à–∏—Ä–∏—Ç—å –≥—Ä–∞—Ñ –æ—Ç —É–∑–ª–∞ —Å –≥–ª—É–±–∏–Ω–æ–π")
    expand_parser.add_argument("--start_id", type=int, required=True)
    expand_parser.add_argument("--depth", type=int, default=1)

    args = parser.parse_args()
    storage = Storage()

    # Diary logic
    if args.command == "write_entry":
        storage.write_entry(args.text, args.tags)
        print("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    elif args.command == "read_entries":
        for entry in storage.read_entries(limit=args.limit):
            print(f"[{entry[0]}] {entry[1]} | tags: {entry[2]} | ts: {entry[3]}")

    elif args.command == "search_entries_by_time":
        results = storage.search_entries_by_time(args.from_ts, args.to_ts)
        for e in results:
            print(f"[{e[0]}] {e[1]} | tags: {e[2]} | ts: {e[3]}")

    # Graph logic
    elif args.command == "add_concept":
        cid = storage.add_concept(args.name, args.description)
        print(f"‚úÖ –ö–æ–Ω—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {cid}")

    elif args.command == "add_link":
        storage.add_link(args.from_node, args.to_node, args.relation)
        print("‚úÖ –°–≤—è–∑—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    elif args.command == "expand_graph":
        links = storage.expand_graph(args.start_id, args.depth)
        print(f"üìê –ü–æ–¥–≥—Ä–∞—Ñ (–¥–æ –≥–ª—É–±–∏–Ω—ã {args.depth}):")
        for src, tgt, rel in links:
            print(f"{src} --[{rel}]--> {tgt}")

    else:
        parser.print_help()

    storage.close()

def run_mcp_agent(config):
    print(f"[HMP-MCP] MCP-Agent '{config.get('agent_name', 'unnamed')}' –∑–∞–ø—É—â–µ–Ω –≤ DHT-—Ä–µ–∂–∏–º–µ")
    
    bootstrap_path = config.get("bootstrap_file", "bootstrap.txt")
    update_interval = config.get("update_interval", 30)  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
    enable_api = config.get("serve_api", True)

    def load_bootstrap():
        try:
            with open(bootstrap_path, "r") as f:
                return [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            print("[Warning] bootstrap.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫ –±–µ–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —É–∑–ª–æ–≤.")
            return []

    def update_dht():
        nodes = load_bootstrap()
        print(f"[MCP] –ù–∞–π–¥–µ–Ω–æ {len(nodes)} —É–∑–ª–æ–≤ –≤ bootstrap.txt:")
        for node in nodes:
            print(f" ‚Ü™Ô∏è  –ü–∏–Ω–≥ {node} (–∑–∞–≥–ª—É—à–∫–∞)")
            # –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ping + REST-–∑–∞–ø—Ä–æ—Å—ã
        print("[MCP] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DHT –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    def mcp_loop():
        while True:
            update_dht()
            time.sleep(update_interval)

    # –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DHT
    threading.Thread(target=mcp_loop, daemon=True).start()

    # REST API –∑–∞–≥–ª—É—à–∫–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ FastAPI / Flask)
    if enable_api:
        print("[MCP] REST API (–∑–∞–≥–ª—É—à–∫–∞) –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:8000/")
        print("      –í –±—É–¥—É—â–µ–º: /bootstrap, /status, /reputation/:id –∏ –ø—Ä.")
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n[MCP] MCP-Agent –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")

if __name__ == "__main__":
    main()

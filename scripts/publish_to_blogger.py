import json
import os
import hashlib
import markdown2
from googleapiclient.discovery import build
from google.oauth2.credentials import Credentials
from googleapiclient.errors import HttpError
import pickle
import time

# –§–∞–π–ª—ã
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
JSON_FILE = os.path.abspath(os.path.join(SCRIPT_DIR, "..", "published_posts.json"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN_FILE = os.environ.get('TOKEN_FILE', 'token.pkl')
with open(TOKEN_FILE, 'rb') as f:
    creds = pickle.load(f)

service = build('blogger', 'v3', credentials=creds)
BLOG_ID = os.environ['BLOG_ID']

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
if os.path.exists(JSON_FILE):
    try:
        with open(JSON_FILE, 'r', encoding='utf-8') as f:
            published = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {list(published.keys())}")
    except json.JSONDecodeError:
        print("‚ö† published_posts.json –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è.")
        published = {}
else:
    published = {}
    print("‚ö† published_posts.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è.")

# –û–±—Ö–æ–¥ markdown —Ñ–∞–π–ª–æ–≤
md_files = []
for root, _, files in os.walk("docs"):
    for filename in files:
        if filename.endswith(".md"):
            md_files.append(os.path.join(root, filename))

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
md_files.sort()

for path in md_files:
    title = os.path.splitext(os.path.basename(path))[0]

    with open(path, 'r', encoding='utf-8') as f:
        md_content = f.read()

    html_content = markdown2.markdown(md_content)
    content_hash = hashlib.md5(md_content.encode('utf-8')).hexdigest()

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if title in published and published[title]['hash'] == content_hash:
        print(f"‚è≠ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {title}")
        continue

    print(f"üìù –ù–æ–≤—ã–π –∏–ª–∏ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –ø–æ—Å—Ç: {title}")

    post = {
        "kind": "blogger#post",
        "title": title,
        "content": html_content
    }

    try:
        if title in published:
            # –æ–±–Ω–æ–≤–ª—è–µ–º
            post_id = published[title]['id']
            updated_post = service.posts().update(
                blogId=BLOG_ID, postId=post_id, body=post
            ).execute()
            print(f"‚ôªÔ∏è –ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: {updated_post['url']}")
            published[title] = {"id": post_id, "hash": content_hash}
        else:
            # –ø—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤—ã–π
            new_post = service.posts().insert(
                blogId=BLOG_ID, body=post, isDraft=False
            ).execute()
            print(f"üÜï –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {new_post['url']}")
            published[title] = {"id": new_post['id'], "hash": content_hash}

        # üíæ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
        with open(JSON_FILE, 'w', encoding='utf-8') as f:
            json.dump(published, f, ensure_ascii=False, indent=2)

        print("‚è± –ü–∞—É–∑–∞ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ—Å—Ç–æ–º...")
        time.sleep(600)

    except HttpError as e:
        if e.resp.status == 403 and "quotaExceeded" in str(e):
            print("‚ö† –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç Blogger API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
            break
        else:
            raise

print("üéâ –í—Å–µ –ø–æ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

import os
import sys
import json
import hashlib
import markdown2
import pickle
import time
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
JSON_FILE = os.path.abspath(os.path.join(SCRIPT_DIR, "..", "published_posts.json"))
LOCK_FILE = os.path.abspath(os.path.join(SCRIPT_DIR, "publish.lock"))

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è –¥–≤–∞–∂–¥—ã
if os.path.exists(LOCK_FILE):
    print("‚ö† –°–∫—Ä–∏–ø—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º.")
    sys.exit(0)

with open(LOCK_FILE, "w") as f:
    f.write("locked")

try:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
    TOKEN_FILE = os.environ.get('TOKEN_FILE', 'token.pkl')
    with open(TOKEN_FILE, 'rb') as f:
        creds = pickle.load(f)

    service = build('blogger', 'v3', credentials=creds)
    BLOG_ID = os.environ['BLOG_ID']

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    if os.path.exists(JSON_FILE):
        try:
            with open(JSON_FILE, 'r', encoding='utf-8') as f:
                published = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {list(published.keys())}")
        except json.JSONDecodeError:
            print("‚ö† published_posts.json –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è.")
            published = {}
    else:
        print("‚ö† published_posts.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è.")
        published = {}

    # –û–±—Ö–æ–¥–∏–º markdown-—Ñ–∞–π–ª—ã
    for root, _, files in os.walk("docs"):
        for filename in files:
            if not filename.endswith(".md"):
                continue

            path = os.path.join(root, filename)
            title = os.path.splitext(filename)[0]

            with open(path, 'r', encoding='utf-8') as f:
                md_content = f.read()

            html_content = markdown2.markdown(md_content)
            content_hash = hashlib.md5(md_content.encode('utf-8')).hexdigest()

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if title in published and published[title]['hash'] == content_hash:
                continue

            print(f"üìù –ù–æ–≤—ã–π –∏–ª–∏ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –ø–æ—Å—Ç: {title}")

            post = {
                "kind": "blogger#post",
                "title": title,
                "content": html_content
            }

            try:
                # –ï—Å–ª–∏ –æ—Ç–ª–∞–¥–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º JSON
                if os.environ.get('DEBUG_PUBLISH', '0') == '1':
                    post_id = published.get(title, {}).get("id", "DUMMY_ID")
                    published[title] = {"id": post_id, "hash": content_hash}
                    print("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (–ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞).")
                    with open(JSON_FILE, 'w', encoding='utf-8') as f:
                        json.dump(published, f, ensure_ascii=False, indent=2)
                    sys.exit(0)

                # –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤—ã–π –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                if title in published:
                    post_id = published[title]['id']
                    updated_post = service.posts().update(
                        blogId=BLOG_ID, postId=post_id, body=post
                    ).execute()
                    print(f"‚ôªÔ∏è –ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω: {updated_post['url']}")
                    published[title] = {"id": post_id, "hash": content_hash}
                else:
                    new_post = service.posts().insert(
                        blogId=BLOG_ID, body=post, isDraft=False
                    ).execute()
                    print(f"üÜï –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {new_post['url']}")
                    published[title] = {"id": new_post['id'], "hash": content_hash}

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                with open(JSON_FILE, 'w', encoding='utf-8') as f:
                    json.dump(published, f, ensure_ascii=False, indent=2)

                # –ü—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Å—Ç –∑–∞ –∑–∞–ø—É—Å–∫
                print("‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.")
                sys.exit(0)

            except HttpError as e:
                if e.resp.status == 403 and "quotaExceeded" in str(e):
                    print("‚ö† –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç Blogger API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
                    sys.exit(1)
                else:
                    raise

    print("üéâ –í—Å–µ –ø–æ—Å—Ç—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã ‚Äî –Ω–æ–≤—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–µ—Ç.")

finally:
    # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)
